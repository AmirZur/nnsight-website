{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dictionary Learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nnsight import LanguageModel\n",
    "from dictionary_learning.dictionary import AutoEncoder # install from https://github.com/saprmarks/dictionary_learning\n",
    "import torch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "weights_path = \"./weights/autoencoders/pythia-70m-deduped/mlp_out_layer0/0_8192/checkpoints/ae_99000.pt\"\n",
    "\n",
    "activation_dim = 512 # dimension of the NN's activations to be autoencoded\n",
    "dictionary_size = 16 * activation_dim # number of features in the dictionary\n",
    "\n",
    "ae = AutoEncoder(activation_dim, dictionary_size)\n",
    "ae.load_state_dict(torch.load(weights_path))\n",
    "ae.cuda()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = LanguageModel(\"EleutherAI/pythia-70m-deduped\", device_map=\"cuda:0\")\n",
    "tokenizer = model.tokenizer\n",
    "\n",
    "prompt = \"\"\"\n",
    "Call me Ishmael. Some years ago--never mind how long precisely--having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world. It is a way I have of driving off the spleen and regulating the circulation. Whenever I find myself growing grim about the mouth; whenever it is a damp, drizzly November in my soul; whenever I find myself involuntarily pausing before coffin warehouses, and bringing up the rear of every funeral I meet; and especially whenever my hypos get such an upper hand of me, that it requires a strong moral principle to prevent me from deliberately stepping into the street, and methodically knocking people's hats off--then, I account it high time to get to sea as soon as I can.\n",
    "\"\"\"\n",
    "\n",
    "with model.invoke(prompt) as invoker:\n",
    "    mlp_0 = model.gpt_neox.layers[0].mlp.output.save()\n",
    "\n",
    "features = ae.encode(mlp_0.value) # get features from activations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "summed_activations = features.abs().sum(dim=1) # Sort by max activations\n",
    "top_activations_indices = summed_activations.topk(20).indices # Get indices of top 20\n",
    "\n",
    "compounded = []\n",
    "for i in top_activations_indices[0]:\n",
    "    compounded.append(features[:,:,i.item()].cpu()[0])\n",
    "\n",
    "compounded = torch.stack(compounded, dim=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from circuitsvis.tokens import colored_tokens_multi\n",
    "\n",
    "tokens = tokenizer.encode(prompt)\n",
    "str_tokens = [tokenizer.decode(t) for t in tokens]\n",
    "\n",
    "colored_tokens_multi(str_tokens, compounded.T)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "interp",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
